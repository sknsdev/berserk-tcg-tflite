#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import sys
if sys.platform == 'win32':
    import io
    sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding='utf-8')

import pandas as pd
import numpy as np
from collections import Counter

def analyze_class_distribution():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Å–æ–≤ –≤ –∞—É–≥–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –¥–∞—Ç–∞—Å–µ—Ç–µ"""
    print("=== –ê–ù–ê–õ–ò–ó –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–Ø –ö–õ–ê–°–°–û–í ===")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞—É–≥–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–∞—Ç–∞—Å–µ—Ç
    try:
        df = pd.read_csv('augmented_cards_dataset.csv')
        print(f"–ó–∞–≥—Ä—É–∂–µ–Ω –¥–∞—Ç–∞—Å–µ—Ç: {len(df)} –∑–∞–ø–∏—Å–µ–π")
    except FileNotFoundError:
        print("‚ùå –§–∞–π–ª 'augmented_cards_dataset.csv' –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ card_id (–æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏)
    if 'card_id' in df.columns:
        print("\n=== –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ü–û CARD_ID ===")
        card_counts = df['card_id'].value_counts().sort_values()
        
        print(f"–í—Å–µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö card_id: {len(card_counts)}")
        print(f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–º–µ—Ä–æ–≤: {card_counts.min()}")
        print(f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–º–µ—Ä–æ–≤: {card_counts.max()}")
        print(f"–°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–º–µ—Ä–æ–≤: {card_counts.mean():.2f}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞—Å—Å—ã —Å –º–∞–ª—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø—Ä–∏–º–µ—Ä–æ–≤
        single_examples = card_counts[card_counts == 1]
        if len(single_examples) > 0:
            print(f"\n‚ùå –ü–†–û–ë–õ–ï–ú–ê: –ù–∞–π–¥–µ–Ω–æ {len(single_examples)} –∫–ª–∞—Å—Å–æ–≤ —Å –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–º –ø—Ä–∏–º–µ—Ä–æ–º:")
            for card_id in single_examples.index[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                print(f"  - {card_id}")
            if len(single_examples) > 10:
                print(f"  ... –∏ –µ—â–µ {len(single_examples) - 10} –∫–ª–∞—Å—Å–æ–≤")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞—Å—Å—ã —Å 2 –ø—Ä–∏–º–µ—Ä–∞–º–∏ (—Ç–æ–∂–µ –ø—Ä–æ–±–ª–µ–º–∞—Ç–∏—á–Ω–æ –¥–ª—è stratify)
        two_examples = card_counts[card_counts == 2]
        if len(two_examples) > 0:
            print(f"\n‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –ù–∞–π–¥–µ–Ω–æ {len(two_examples)} –∫–ª–∞—Å—Å–æ–≤ —Å –¥–≤—É–º—è –ø—Ä–∏–º–µ—Ä–∞–º–∏:")
            for card_id in two_examples.index[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                print(f"  - {card_id}")
            if len(two_examples) > 5:
                print(f"  ... –∏ –µ—â–µ {len(two_examples) - 5} –∫–ª–∞—Å—Å–æ–≤")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–∏–º–µ—Ä–æ–≤
        print("\n=== –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ö–û–õ–ò–ß–ï–°–¢–í–ê –ü–†–ò–ú–ï–†–û–í ===")
        count_distribution = Counter(card_counts.values)
        for count, num_classes in sorted(count_distribution.items()):
            print(f"  {count} –ø—Ä–∏–º–µ—Ä–æ–≤: {num_classes} –∫–ª–∞—Å—Å–æ–≤")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥—Ä—É–≥–∏–µ –ø–æ–ª—è
    if 'card_id_encoded' in df.columns:
        print("\n=== –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ü–û CARD_ID_ENCODED ===")
        encoded_counts = df['card_id_encoded'].value_counts().sort_values()
        print(f"–í—Å–µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö encoded –∫–ª–∞—Å—Å–æ–≤: {len(encoded_counts)}")
        print(f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–º–µ—Ä–æ–≤: {encoded_counts.min()}")
        print(f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–º–µ—Ä–æ–≤: {encoded_counts.max()}")
        
        single_encoded = encoded_counts[encoded_counts == 1]
        if len(single_encoded) > 0:
            print(f"‚ùå –ö–ª–∞—Å—Å–æ–≤ —Å –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–º –ø—Ä–∏–º–µ—Ä–æ–º: {len(single_encoded)}")
    
    return df, card_counts

def suggest_solutions(card_counts):
    """–ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã"""
    print("\n=== –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –†–ï–®–ï–ù–ò–Æ –ü–†–û–ë–õ–ï–ú–´ ===")
    
    single_examples = card_counts[card_counts == 1]
    two_examples = card_counts[card_counts == 2]
    
    if len(single_examples) > 0 or len(two_examples) > 0:
        print("\nüîß –í–û–ó–ú–û–ñ–ù–´–ï –†–ï–®–ï–ù–ò–Ø:")
        print("\n1. –£–¥–∞–ª–∏—Ç—å –∫–ª–∞—Å—Å—ã —Å –º–∞–ª—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø—Ä–∏–º–µ—Ä–æ–≤:")
        print("   - –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –∫–ª–∞—Å—Å—ã —Å 1 –ø—Ä–∏–º–µ—Ä–æ–º")
        print("   - –í–æ–∑–º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –∫–ª–∞—Å—Å—ã —Å 2 –ø—Ä–∏–º–µ—Ä–∞–º–∏")
        
        print("\n2. –£–≤–µ–ª–∏—á–∏—Ç—å –∞—É–≥–º–µ–Ω—Ç–∞—Ü–∏—é –¥–ª—è –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤:")
        print("   - –°–æ–∑–¥–∞—Ç—å –±–æ–ª—å—à–µ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –¥–ª—è –∫–ª–∞—Å—Å–æ–≤ —Å –º–∞–ª—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø—Ä–∏–º–µ—Ä–æ–≤")
        
        print("\n3. –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:")
        print("   - –£–±—Ä–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä stratify –∏–∑ train_test_split")
        print("   - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π –ø–æ–¥—Ö–æ–¥ –∫ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—é")
        
        print("\n4. –û–±—ä–µ–¥–∏–Ω–∏—Ç—å –ø–æ—Ö–æ–∂–∏–µ –∫–ª–∞—Å—Å—ã:")
        print("   - –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ–¥–Ω–æ–π –∫–∞—Ä—Ç—ã –≤ –æ–¥–∏–Ω –∫–ª–∞—Å—Å")
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º, —Å–∫–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Ç–µ—Ä—è–µ–º
        total_to_remove = len(single_examples) + len(two_examples) * 2
        total_samples = card_counts.sum()
        percentage = (total_to_remove / total_samples) * 100
        
        print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"   –í—Å–µ–≥–æ –ø—Ä–∏–º–µ—Ä–æ–≤: {total_samples}")
        print(f"   –ü—Ä–∏–º–µ—Ä–æ–≤ –∫ —É–¥–∞–ª–µ–Ω–∏—é: {total_to_remove} ({percentage:.1f}%)")
        print(f"   –û—Å—Ç–∞–Ω–µ—Ç—Å—è –ø—Ä–∏–º–µ—Ä–æ–≤: {total_samples - total_to_remove}")
        print(f"   –û—Å—Ç–∞–Ω–µ—Ç—Å—è –∫–ª–∞—Å—Å–æ–≤: {len(card_counts) - len(single_examples) - len(two_examples)}")
    else:
        print("‚úÖ –ü—Ä–æ–±–ª–µ–º —Å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º –∫–ª–∞—Å—Å–æ–≤ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ!")

if __name__ == "__main__":
    df, card_counts = analyze_class_distribution()
    if df is not None:
        suggest_solutions(card_counts)