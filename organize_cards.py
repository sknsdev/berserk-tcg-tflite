#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –∫–∞—Ä—Ç –≤ –ø–æ–¥–ø–∞–ø–∫–∏ –ø–æ –∫–ª–∞—Å—Å–∞–º
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–∑–≤–∞–Ω–∏–π —Ñ–∞–π–ª–æ–≤
"""

import os
import shutil
from pathlib import Path
import re

def organize_cards(cards_dir='./cards'):
    """
    –û—Ä–≥–∞–Ω–∏–∑—É–µ—Ç –∫–∞—Ä—Ç—ã –≤ –ø–æ–¥–ø–∞–ø–∫–∏ –ø–æ –∫–ª–∞—Å—Å–∞–º
    
    Args:
        cards_dir (str): –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å –∫–∞—Ä—Ç–∞–º–∏
    """
    cards_path = Path(cards_dir)
    
    if not cards_path.exists():
        print(f"‚ùå –ü–∞–ø–∫–∞ {cards_dir} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return False
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∫–æ—Ä–Ω–µ –ø–∞–ø–∫–∏
    image_extensions = {'.webp', '.jpg', '.jpeg', '.png'}
    image_files = [f for f in cards_path.iterdir() 
                  if f.is_file() and f.suffix.lower() in image_extensions]
    
    if not image_files:
        print("‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∫–æ—Ä–Ω–µ –ø–∞–ø–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return False
    
    print(f"üìÅ –ù–∞–π–¥–µ–Ω–æ {len(image_files)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –∏ –≥—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–ª–∞—Å—Å–∞–º
    class_groups = {}
    
    for image_file in image_files:
        filename = image_file.stem  # –ò–º—è –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª–∞—Å—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
        class_name = extract_class_from_filename(filename)
        
        if class_name not in class_groups:
            class_groups[class_name] = []
        class_groups[class_name].append(image_file)
    
    print(f"\nüìä –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {len(class_groups)} –∫–ª–∞—Å—Å–æ–≤:")
    for class_name, files in class_groups.items():
        print(f"  ‚Ä¢ {class_name}: {len(files)} —Ñ–∞–π–ª–æ–≤")
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏ –∏ –ø–µ—Ä–µ–º–µ—â–∞–µ–º —Ñ–∞–π–ª—ã
    moved_count = 0
    
    for class_name, files in class_groups.items():
        class_dir = cards_path / class_name
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –∫–ª–∞—Å—Å–∞ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        class_dir.mkdir(exist_ok=True)
        print(f"\nüìÇ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–ª–∞—Å—Å '{class_name}'...")
        
        for image_file in files:
            target_path = class_dir / image_file.name
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ñ–∞–π–ª –≤ —Ü–µ–ª–µ–≤–æ–π –ø–∞–ø–∫–µ
            if target_path.exists():
                print(f"  ‚ö†Ô∏è  –§–∞–π–ª {image_file.name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ {class_name}/")
                continue
            
            try:
                shutil.move(str(image_file), str(target_path))
                moved_count += 1
                print(f"  ‚úÖ {image_file.name} ‚Üí {class_name}/")
            except Exception as e:
                print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ {image_file.name}: {e}")
    
    print(f"\nüéâ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print(f"üìÅ –ü–µ—Ä–µ–º–µ—â–µ–Ω–æ {moved_count} —Ñ–∞–π–ª–æ–≤")
    print(f"üìÇ –°–æ–∑–¥–∞–Ω–æ {len(class_groups)} –ø–∞–ø–æ–∫ –∫–ª–∞—Å—Å–æ–≤")
    
    return True

def extract_class_from_filename(filename):
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–ª–∞—Å—Å –∫–∞—Ä—Ç—ã –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
    
    Args:
        filename (str): –ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
        
    Returns:
        str: –ù–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞
    """
    # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –Ω–∞–∑–≤–∞–Ω–∏–π
    patterns = [
        # laar_1 -> laar
        (r'^([a-zA-Z]+)_\d+$', lambda m: m.group(1)),
        
        # s1_1, s2_100 -> series_1, series_2
        (r'^s(\d+)_\d+$', lambda m: f'series_{m.group(1)}'),
        
        # card_warrior_1 -> warrior
        (r'^\w+_([a-zA-Z]+)_\d+$', lambda m: m.group(1)),
        
        # warrior_fire_1 -> warrior_fire
        (r'^([a-zA-Z]+_[a-zA-Z]+)_\d+$', lambda m: m.group(1)),
        
        # warrior1, mage2 -> warrior, mage
        (r'^([a-zA-Z]+)\d+$', lambda m: m.group(1)),
    ]
    
    for pattern, extractor in patterns:
        match = re.match(pattern, filename)
        if match:
            return extractor(match)
    
    # –ï—Å–ª–∏ –ø–∞—Ç—Ç–µ—Ä–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å –¥–æ –ø–µ—Ä–≤–æ–≥–æ —á–∏—Å–ª–∞ –∏–ª–∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
    parts = re.split(r'[_\d]', filename)
    if parts and parts[0]:
        return parts[0]
    
    # –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤–∞—Ä–∏–∞–Ω—Ç - –∏—Å–ø–æ–ª—å–∑—É–µ–º 'unknown'
    return 'unknown'

def show_current_structure(cards_dir='./cards'):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–∫–∏ —Å –∫–∞—Ä—Ç–∞–º–∏
    """
    cards_path = Path(cards_dir)
    
    if not cards_path.exists():
        print(f"‚ùå –ü–∞–ø–∫–∞ {cards_dir} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    print(f"üìÅ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–∞–ø–∫–∏ {cards_dir}:")
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã –≤ –∫–æ—Ä–Ω–µ
    image_extensions = {'.webp', '.jpg', '.jpeg', '.png'}
    root_images = [f for f in cards_path.iterdir() 
                  if f.is_file() and f.suffix.lower() in image_extensions]
    
    if root_images:
        print(f"  üìÑ –í –∫–æ—Ä–Ω–µ: {len(root_images)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã –≤ –ø–æ–¥–ø–∞–ø–∫–∞—Ö
    subdirs = [d for d in cards_path.iterdir() if d.is_dir()]
    
    if subdirs:
        print(f"  üìÇ –ü–æ–¥–ø–∞–ø–∫–∏:")
        for subdir in sorted(subdirs):
            subdir_images = [f for f in subdir.iterdir() 
                           if f.is_file() and f.suffix.lower() in image_extensions]
            print(f"    ‚Ä¢ {subdir.name}: {len(subdir_images)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
    else:
        print(f"  üìÇ –ü–æ–¥–ø–∞–ø–æ–∫ –Ω–µ—Ç")

def main():
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
    """
    print("üÉè –û–†–ì–ê–ù–ò–ó–ê–¶–ò–Ø –ö–ê–†–¢ –ü–û –ö–õ–ê–°–°–ê–ú")
    print("=" * 40)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    print("\nüìä –¢–µ–∫—É—â–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞:")
    show_current_structure()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–∞–π–ª—ã –≤ –∫–æ—Ä–Ω–µ –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
    cards_path = Path('./cards')
    image_extensions = {'.webp', '.jpg', '.jpeg', '.png'}
    root_images = [f for f in cards_path.iterdir() 
                  if f.is_file() and f.suffix.lower() in image_extensions]
    
    if not root_images:
        print("\n‚úÖ –í—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —É–∂–µ –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω—ã –≤ –ø–æ–¥–ø–∞–ø–∫–∏!")
        return
    
    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    print(f"\n‚ùì –ù–∞–π–¥–µ–Ω–æ {len(root_images)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –∫–æ—Ä–Ω–µ –ø–∞–ø–∫–∏.")
    print("–•–æ—Ç–∏—Ç–µ –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å –∏—Ö –≤ –ø–æ–¥–ø–∞–ø–∫–∏ –ø–æ –∫–ª–∞—Å—Å–∞–º? (y/n): ", end="")
    
    try:
        response = input().strip().lower()
        if response in ['y', 'yes', '–¥–∞', '–¥']:
            print("\nüöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é...")
            if organize_cards():
                print("\nüìä –ù–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞:")
                show_current_structure()
            else:
                print("\n‚ùå –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å")
        else:
            print("\n‚ùå –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
    except KeyboardInterrupt:
        print("\n\n‚ùå –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main()