#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –¥–∞—Ç–∞—Å–µ—Ç–∞ –∫–∞—Ä—Ç
–ü–æ–º–æ–≥–∞–µ—Ç –≤—ã—è–≤–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—ã –ø–µ—Ä–µ–¥ –æ–±—É—á–µ–Ω–∏–µ–º –º–æ–¥–µ–ª–∏
"""

import os
import pandas as pd
import numpy as np
from collections import Counter
import matplotlib.pyplot as plt
import json
from pathlib import Path

def check_directory_structure():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π"""
    print("=== –ü–†–û–í–ï–†–ö–ê –°–¢–†–£–ö–¢–£–†–´ –î–ò–†–ï–ö–¢–û–†–ò–ô ===")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –ø–∞–ø–∫—É —Å –∫–∞—Ä—Ç–∞–º–∏
    cards_dir = './cards'
    if not os.path.exists(cards_dir):
        print("‚ùå –ü–∞–ø–∫–∞ './cards' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return False
    
    print(f"‚úÖ –ü–∞–ø–∫–∞ '{cards_dir}' –Ω–∞–π–¥–µ–Ω–∞")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∞–ø–∫–∏
    subdirs = [d for d in os.listdir(cards_dir) if os.path.isdir(os.path.join(cards_dir, d))]
    print(f"üìÅ –ù–∞–π–¥–µ–Ω–æ –ø–æ–¥–ø–∞–ø–æ–∫: {len(subdirs)}")
    
    total_files = 0
    for subdir in subdirs:
        subdir_path = os.path.join(cards_dir, subdir)
        files = [f for f in os.listdir(subdir_path) if f.lower().endswith(('.webp', '.jpg', '.jpeg', '.png'))]
        total_files += len(files)
        print(f"   üìÇ {subdir}: {len(files)} —Ñ–∞–π–ª–æ–≤")
    
    print(f"üìä –í—Å–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {total_files}")
    
    if total_files == 0:
        print("‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
        return False
    
    return True

def check_base_dataset():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –±–∞–∑–æ–≤—ã–π –¥–∞—Ç–∞—Å–µ—Ç"""
    print("\n=== –ü–†–û–í–ï–†–ö–ê –ë–ê–ó–û–í–û–ì–û –î–ê–¢–ê–°–ï–¢–ê ===")
    
    csv_file = 'cards_dataset.csv'
    if not os.path.exists(csv_file):
        print(f"‚ùå –§–∞–π–ª '{csv_file}' –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python data_preparation.py")
        return None
    
    print(f"‚úÖ –§–∞–π–ª '{csv_file}' –Ω–∞–π–¥–µ–Ω")
    
    try:
        df = pd.read_csv(csv_file)
        print(f"üìä –ó–∞–ø–∏—Å–µ–π –≤ –¥–∞—Ç–∞—Å–µ—Ç–µ: {len(df)}")
        print(f"üìä –°—Ç–æ–ª–±—Ü–æ–≤: {len(df.columns)}")
        print(f"üìä –°—Ç–æ–ª–±—Ü—ã: {list(df.columns)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Å–µ—Ç–∞–º
        if 'set' in df.columns:
            print("\nüìà –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Å–µ—Ç–∞–º:")
            set_counts = df['set'].value_counts()
            for set_name, count in set_counts.items():
                print(f"   {set_name}: {count} –∫–∞—Ä—Ç")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–∞—Ä—Ç—ã
        if 'card_name' in df.columns:
            unique_cards = df['card_name'].nunique()
            print(f"\nüÉè –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–∞—Ä—Ç: {unique_cards}")
            
            # –ù–∞—Ö–æ–¥–∏–º –∫–∞—Ä—Ç—ã —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø—Ä–∏–º–µ—Ä–æ–≤
            card_counts = df['card_name'].value_counts()
            min_count = card_counts.min()
            max_count = card_counts.max()
            
            print(f"üìä –ú–∏–Ω–∏–º—É–º –ø—Ä–∏–º–µ—Ä–æ–≤ –Ω–∞ –∫–∞—Ä—Ç—É: {min_count}")
            print(f"üìä –ú–∞–∫—Å–∏–º—É–º –ø—Ä–∏–º–µ—Ä–æ–≤ –Ω–∞ –∫–∞—Ä—Ç—É: {max_count}")
            print(f"üìä –°—Ä–µ–¥–Ω–µ–µ –ø—Ä–∏–º–µ—Ä–æ–≤ –Ω–∞ –∫–∞—Ä—Ç—É: {card_counts.mean():.1f}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –∫–∞—Ä—Ç—ã
            if min_count < 2:
                problem_cards = card_counts[card_counts < 2]
                print(f"\n‚ö†Ô∏è  –ü–†–û–ë–õ–ï–ú–ê: {len(problem_cards)} –∫–∞—Ä—Ç —Å –µ–¥–∏–Ω–∏—á–Ω—ã–º–∏ –ø—Ä–∏–º–µ—Ä–∞–º–∏:")
                for card, count in problem_cards.items():
                    print(f"   - {card}: {count} –ø—Ä–∏–º–µ—Ä")
                print("üí° –†–µ—à–µ–Ω–∏–µ: –∑–∞–ø—É—Å—Ç–∏—Ç–µ data_augmentation.py")
            else:
                print("\n‚úÖ –í—Å–µ –∫–∞—Ä—Ç—ã –∏–º–µ—é—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∏–º–µ—Ä–æ–≤ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è")
        
        return df
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –¥–∞—Ç–∞—Å–µ—Ç–∞: {e}")
        return None

def check_augmented_dataset():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞—É–≥–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–∞—Ç–∞—Å–µ—Ç"""
    print("\n=== –ü–†–û–í–ï–†–ö–ê –ê–£–ì–ú–ï–ù–¢–ò–†–û–í–ê–ù–ù–û–ì–û –î–ê–¢–ê–°–ï–¢–ê ===")
    
    csv_file = 'augmented_cards_dataset.csv'
    aug_dir = './cards_augmented'
    
    if not os.path.exists(csv_file):
        print(f"‚ùå –§–∞–π–ª '{csv_file}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
        print("üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python data_augmentation.py")
        return None
    
    if not os.path.exists(aug_dir):
        print(f"‚ùå –ü–∞–ø–∫–∞ '{aug_dir}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        print("üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python data_augmentation.py")
        return None
    
    print(f"‚úÖ –ê—É–≥–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–∞—Ç–∞—Å–µ—Ç –Ω–∞–π–¥–µ–Ω")
    
    try:
        df = pd.read_csv(csv_file)
        print(f"üìä –ó–∞–ø–∏—Å–µ–π –≤ –∞—É–≥–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –¥–∞—Ç–∞—Å–µ—Ç–µ: {len(df)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–∞—Ä—Ç–∞–º
        if 'card_name' in df.columns:
            card_counts = df['card_name'].value_counts()
            min_count = card_counts.min()
            max_count = card_counts.max()
            
            print(f"üìä –ú–∏–Ω–∏–º—É–º –ø—Ä–∏–º–µ—Ä–æ–≤ –Ω–∞ –∫–∞—Ä—Ç—É: {min_count}")
            print(f"üìä –ú–∞–∫—Å–∏–º—É–º –ø—Ä–∏–º–µ—Ä–æ–≤ –Ω–∞ –∫–∞—Ä—Ç—É: {max_count}")
            print(f"üìä –°—Ä–µ–¥–Ω–µ–µ –ø—Ä–∏–º–µ—Ä–æ–≤ –Ω–∞ –∫–∞—Ä—Ç—É: {card_counts.mean():.1f}")
            
            if min_count < 2:
                problem_cards = card_counts[card_counts < 2]
                print(f"\n‚ö†Ô∏è  –ü–†–û–ë–õ–ï–ú–ê: {len(problem_cards)} –∫–∞—Ä—Ç –≤—Å–µ –µ—â–µ —Å –µ–¥–∏–Ω–∏—á–Ω—ã–º–∏ –ø—Ä–∏–º–µ—Ä–∞–º–∏")
                print("üí° –£–≤–µ–ª–∏—á—å—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—É–≥–º–µ–Ω—Ç–∞—Ü–∏–π –≤ data_augmentation.py")
                return False
            else:
                print("\n‚úÖ –í—Å–µ –∫–∞—Ä—Ç—ã –∏–º–µ—é—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∏–º–µ—Ä–æ–≤ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã –∞—É–≥–º–µ–Ω—Ç–∞—Ü–∏–∏
        if 'augmentation_type' in df.columns:
            aug_types = df['augmentation_type'].value_counts()
            print("\nüîÑ –¢–∏–ø—ã –∞—É–≥–º–µ–Ω—Ç–∞—Ü–∏–∏:")
            for aug_type, count in aug_types.items():
                print(f"   {aug_type}: {count} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
        
        return df
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∞—É–≥–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç–∞: {e}")
        return None

def check_model_files():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤ –º–æ–¥–µ–ª–∏"""
    print("\n=== –ü–†–û–í–ï–†–ö–ê –§–ê–ô–õ–û–í –ú–û–î–ï–õ–ò ===")
    
    model_files = [
        'berserk_card_model_augmented.tflite',
        'berserk_card_model_augmented.h5',
        'model_info_augmented.json',
        'training_history_augmented.png'
    ]
    
    found_files = []
    for file in model_files:
        if os.path.exists(file):
            size = os.path.getsize(file)
            if file.endswith('.png'):
                print(f"‚úÖ {file} ({size} –±–∞–π—Ç)")
            else:
                print(f"‚úÖ {file} ({size / 1024 / 1024:.1f} MB)")
            found_files.append(file)
        else:
            print(f"‚ùå {file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    if len(found_files) == 0:
        print("üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python train_model_augmented.py")
    elif len(found_files) < len(model_files):
        print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ–∞–π–ª—ã –º–æ–¥–µ–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
    else:
        print("‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã –º–æ–¥–µ–ª–∏ –Ω–∞–π–¥–µ–Ω—ã")
    
    return found_files

def plot_dataset_statistics(df_base, df_aug):
    """–°—Ç—Ä–æ–∏—Ç –≥—Ä–∞—Ñ–∏–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–∞—Ç–∞—Å–µ—Ç–∞"""
    print("\n=== –ü–û–°–¢–†–û–ï–ù–ò–ï –ì–†–ê–§–ò–ö–û–í ===")
    
    fig, axes = plt.subplots(2, 2, figsize=(15, 10))
    fig.suptitle('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∞—Ç–∞—Å–µ—Ç–∞ –∫–∞—Ä—Ç Berserk TCG', fontsize=16)
    
    # –ì—Ä–∞—Ñ–∏–∫ 1: –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Å–µ—Ç–∞–º (–±–∞–∑–æ–≤—ã–π –¥–∞—Ç–∞—Å–µ—Ç)
    if df_base is not None and 'set' in df_base.columns:
        set_counts = df_base['set'].value_counts()
        axes[0, 0].bar(set_counts.index, set_counts.values)
        axes[0, 0].set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Å–µ—Ç–∞–º (–±–∞–∑–æ–≤—ã–π –¥–∞—Ç–∞—Å–µ—Ç)')
        axes[0, 0].set_xlabel('–°–µ—Ç')
        axes[0, 0].set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç')
        axes[0, 0].tick_params(axis='x', rotation=45)
    
    # –ì—Ä–∞—Ñ–∏–∫ 2: –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–æ–≤ –Ω–∞ –∫–∞—Ä—Ç—É (–±–∞–∑–æ–≤—ã–π)
    if df_base is not None and 'card_name' in df_base.columns:
        card_counts = df_base['card_name'].value_counts()
        axes[0, 1].hist(card_counts.values, bins=20, alpha=0.7, color='blue')
        axes[0, 1].set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–æ–≤ –Ω–∞ –∫–∞—Ä—Ç—É (–±–∞–∑–æ–≤—ã–π)')
        axes[0, 1].set_xlabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–º–µ—Ä–æ–≤')
        axes[0, 1].set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç')
    
    # –ì—Ä–∞—Ñ–∏–∫ 3: –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Å–µ—Ç–∞–º (–∞—É–≥–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–∞—Ç–∞—Å–µ—Ç)
    if df_aug is not None and 'set' in df_aug.columns:
        set_counts_aug = df_aug['set'].value_counts()
        axes[1, 0].bar(set_counts_aug.index, set_counts_aug.values, color='orange')
        axes[1, 0].set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Å–µ—Ç–∞–º (–∞—É–≥–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π)')
        axes[1, 0].set_xlabel('–°–µ—Ç')
        axes[1, 0].set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π')
        axes[1, 0].tick_params(axis='x', rotation=45)
    
    # –ì—Ä–∞—Ñ–∏–∫ 4: –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–æ–≤ –Ω–∞ –∫–∞—Ä—Ç—É (–∞—É–≥–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π)
    if df_aug is not None and 'card_name' in df_aug.columns:
        card_counts_aug = df_aug['card_name'].value_counts()
        axes[1, 1].hist(card_counts_aug.values, bins=20, alpha=0.7, color='orange')
        axes[1, 1].set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–æ–≤ –Ω–∞ –∫–∞—Ä—Ç—É (–∞—É–≥–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π)')
        axes[1, 1].set_xlabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–º–µ—Ä–æ–≤')
        axes[1, 1].set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç')
    
    plt.tight_layout()
    plt.savefig('dataset_statistics.png', dpi=300, bbox_inches='tight')
    print("‚úÖ –ì—Ä–∞—Ñ–∏–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ dataset_statistics.png")
    plt.show()

def generate_report(df_base, df_aug):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –æ –¥–∞—Ç–∞—Å–µ—Ç–µ"""
    print("\n=== –ì–ï–ù–ï–†–ê–¶–ò–Ø –û–¢–ß–ï–¢–ê ===")
    
    report = {
        'timestamp': pd.Timestamp.now().isoformat(),
        'base_dataset': {},
        'augmented_dataset': {},
        'recommendations': []
    }
    
    # –ë–∞–∑–æ–≤—ã–π –¥–∞—Ç–∞—Å–µ—Ç
    if df_base is not None:
        report['base_dataset'] = {
            'total_images': len(df_base),
            'unique_cards': df_base['card_name'].nunique() if 'card_name' in df_base.columns else 0,
            'sets': df_base['set'].value_counts().to_dict() if 'set' in df_base.columns else {},
            'min_examples_per_card': df_base['card_name'].value_counts().min() if 'card_name' in df_base.columns else 0
        }
    
    # –ê—É–≥–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–∞—Ç–∞—Å–µ—Ç
    if df_aug is not None:
        report['augmented_dataset'] = {
            'total_images': len(df_aug),
            'unique_cards': df_aug['card_name'].nunique() if 'card_name' in df_aug.columns else 0,
            'min_examples_per_card': df_aug['card_name'].value_counts().min() if 'card_name' in df_aug.columns else 0,
            'augmentation_types': df_aug['augmentation_type'].value_counts().to_dict() if 'augmentation_type' in df_aug.columns else {}
        }
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if df_base is not None and 'card_name' in df_base.columns:
        min_count = df_base['card_name'].value_counts().min()
        if min_count < 2:
            report['recommendations'].append("–ó–∞–ø—É—Å—Ç–∏—Ç–µ data_augmentation.py –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã —Å –µ–¥–∏–Ω–∏—á–Ω—ã–º–∏ –ø—Ä–∏–º–µ—Ä–∞–º–∏")
    
    if df_aug is not None and 'card_name' in df_aug.columns:
        min_count_aug = df_aug['card_name'].value_counts().min()
        if min_count_aug < 2:
            report['recommendations'].append("–£–≤–µ–ª–∏—á—å—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—É–≥–º–µ–Ω—Ç–∞—Ü–∏–π –≤ data_augmentation.py")
        elif min_count_aug >= 2:
            report['recommendations'].append("–î–∞—Ç–∞—Å–µ—Ç –≥–æ—Ç–æ–≤ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è! –ó–∞–ø—É—Å—Ç–∏—Ç–µ train_model_augmented.py")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
    with open('dataset_report.json', 'w', encoding='utf-8') as f:
        json.dump(report, f, ensure_ascii=False, indent=2)
    
    print("‚úÖ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ dataset_report.json")
    return report

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –î–ê–¢–ê–°–ï–¢–ê –ö–ê–†–¢ BERSERK TCG")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
    if not check_directory_structure():
        print("\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –ø—Ä–æ–±–ª–µ–º—ã —Å–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–π –¥–∞—Ç–∞—Å–µ—Ç
    df_base = check_base_dataset()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É–≥–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–∞—Ç–∞—Å–µ—Ç
    df_aug = check_augmented_dataset()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã –º–æ–¥–µ–ª–∏
    model_files = check_model_files()
    
    # –°—Ç—Ä–æ–∏–º –≥—Ä–∞—Ñ–∏–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ
    if df_base is not None or df_aug is not None:
        try:
            plot_dataset_statistics(df_base, df_aug)
        except Exception as e:
            print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏: {e}")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    report = generate_report(df_base, df_aug)
    
    # –ò—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    print("\n" + "=" * 50)
    print("üéØ –ò–¢–û–ì–û–í–´–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    
    if len(report['recommendations']) == 0:
        print("‚úÖ –ü—Ä–æ–±–ª–µ–º –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ!")
    else:
        for i, rec in enumerate(report['recommendations'], 1):
            print(f"{i}. {rec}")
    
    print("\nüìä –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤:")
    print("   - dataset_report.json (JSON –æ—Ç—á–µ—Ç)")
    if os.path.exists('dataset_statistics.png'):
        print("   - dataset_statistics.png (–≥—Ä–∞—Ñ–∏–∫–∏)")
    
    print("\nüöÄ –£–¥–∞—á–∏ –≤ –æ–±—É—á–µ–Ω–∏–∏ –º–æ–¥–µ–ª–∏!")

if __name__ == "__main__":
    main()