#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞ Berserk TCG TFLite
–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ —É—Å—Ç–∞–Ω–æ–≤–∫—É –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
"""

import os
import sys
import subprocess
import platform
from pathlib import Path

def run_command(command, shell=True):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ"""
    try:
        result = subprocess.run(command, shell=shell, check=True, 
                              capture_output=True, text=True)
        return True, result.stdout
    except subprocess.CalledProcessError as e:
        return False, e.stderr

def check_python():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–µ—Ä—Å–∏—é Python"""
    version = sys.version_info
    if version.major < 3 or (version.major == 3 and version.minor < 8):
        print("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è Python 3.8 –∏–ª–∏ –≤—ã—à–µ")
        print(f"–¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: {version.major}.{version.minor}.{version.micro}")
        return False
    
    print(f"‚úÖ Python {version.major}.{version.minor}.{version.micro} - OK")
    return True

def create_venv():
    """–°–æ–∑–¥–∞–µ—Ç –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ"""
    venv_path = Path("venv")
    
    if venv_path.exists():
        print("üìÅ –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        return True
    
    print("üîß –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è venv
    if platform.system() == "Windows":
        python_cmd = "python"
    else:
        python_cmd = "python3"
    
    success, output = run_command(f"{python_cmd} -m venv venv")
    
    if success:
        print("‚úÖ –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ")
        return True
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {output}")
        return False

def get_activation_command():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–π –û–°"""
    if platform.system() == "Windows":
        return "venv\\Scripts\\activate"
    else:
        return "source venv/bin/activate"

def get_requirements_file():
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ñ–∞–π–ª requirements –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–µ—Ä—Å–∏–∏ Python"""
    version = sys.version_info
    
    # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –≤–µ—Ä—Å–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª
    if Path("requirements.txt").exists():
        return "requirements.txt"
    
    return None

def install_requirements():
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –≤ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ"""
    print("üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ pip –≤ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏
    if platform.system() == "Windows":
        pip_path = "venv\\Scripts\\pip"
    else:
        pip_path = "venv/bin/pip"
    
    # –û–±–Ω–æ–≤–ª—è–µ–º pip
    print("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ pip...")
    success, output = run_command(f"{pip_path} install --upgrade pip")
    if not success:
        print(f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ pip: {output}")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ñ–∞–π–ª requirements
    requirements_file = get_requirements_file()
    if not requirements_file:
        print("‚ùå –§–∞–π–ª requirements –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    print(f"üìã –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ñ–∞–π–ª: {requirements_file}")
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    success, output = run_command(f"{pip_path} install -r {requirements_file}")
    
    if success:
        print("‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        return True
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {output}")
        print("\nüí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ —Ä–µ—à–µ–Ω–∏—è:")
        print("–û–±–Ω–æ–≤–∏—Ç–µ Python –¥–æ –≤–µ—Ä—Å–∏–∏ 3.9-3.12")
        return False

def check_cards_directory():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –ø–∞–ø–∫–∏ —Å –∫–∞—Ä—Ç–∞–º–∏"""
    cards_path = Path("cards")
    
    if not cards_path.exists():
        print("‚ùå –ü–∞–ø–∫–∞ 'cards' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        print("–°–æ–∑–¥–∞–π—Ç–µ –ø–∞–ø–∫—É 'cards' –∏ –ø–æ–º–µ—Å—Ç–∏—Ç–µ –≤ –Ω–µ—ë –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ä—Ç")
        return False
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤ –≤ –∫–æ—Ä–Ω–µ –∏ –ø–æ–¥–ø–∞–ø–∫–∞—Ö
    card_files_root = list(cards_path.glob("*.webp"))
    card_files_subdirs = list(cards_path.glob("**/*.webp"))
    # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã (—Ñ–∞–π–ª—ã –∏–∑ –∫–æ—Ä–Ω—è –º–æ–≥—É—Ç –ø–æ–ø–∞—Å—Ç—å –≤ –æ–±–∞ —Å–ø–∏—Å–∫–∞)
    all_files = list(cards_path.glob("*.webp")) + list(cards_path.glob("**/*.webp"))
    unique_files = list(set(all_files))
    total_files = len(unique_files)
    
    if total_files == 0:
        print("‚ùå –í –ø–∞–ø–∫–µ 'cards' –Ω–µ—Ç —Ñ–∞–π–ª–æ–≤ .webp")
        print("–ü–æ–º–µ—Å—Ç–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ä—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ WebP –≤ –ø–∞–ø–∫—É 'cards' –∏–ª–∏ –µ—ë –ø–æ–¥–ø–∞–ø–∫–∏")
        return False
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã —Ç–æ–ª—å–∫–æ –≤ –ø–æ–¥–ø–∞–ø–∫–∞—Ö (–∏—Å–∫–ª—é—á–∞—è –∫–æ—Ä–µ–Ω—å)
    subdirs_only = [f for f in card_files_subdirs if f.parent != cards_path]
    
    if card_files_root and subdirs_only:
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {total_files} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∫–∞—Ä—Ç ({len(card_files_root)} –≤ –∫–æ—Ä–Ω–µ, {len(subdirs_only)} –≤ –ø–æ–¥–ø–∞–ø–∫–∞—Ö)")
    elif card_files_root and not subdirs_only:
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(card_files_root)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∫–∞—Ä—Ç –≤ –∫–æ—Ä–Ω–µ –ø–∞–ø–∫–∏")
    else:
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(subdirs_only)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∫–∞—Ä—Ç –≤ –ø–æ–¥–ø–∞–ø–∫–∞—Ö")
    
    return True

def print_next_steps():
    """–í—ã–≤–æ–¥–∏—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö —à–∞–≥–æ–≤"""
    activation_cmd = get_activation_command()
    
    print("\n" + "="*60)
    print("üéâ –ù–ê–°–¢–†–û–ô–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!")
    print("="*60)
    print("\nüìã –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
    print("\n1. –ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ:")
    print(f"   {activation_cmd}")
    print("\n2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –∏ –¥–∞–Ω–Ω—ã–µ:")
    print("   python cli.py check")
    print("\n3. –°–æ–∑–¥–∞–π—Ç–µ –∞—É–≥–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–∞—Ç–∞—Å–µ—Ç:")
    print("   python cli.py augment")
    print("\n4. –û–±—É—á–∏—Ç–µ –º–æ–¥–µ–ª—å:")
    print("   python cli.py train")
    print("\n5. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –º–æ–¥–µ–ª—å:")
    print("   python cli.py test")
    print("\n6. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –≤–µ–±-–¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é:")
    print("   python cli.py web")
    print("\nüí° –ò–ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –≤—Å—ë —Å—Ä–∞–∑—É:")
    print("   python cli.py full")
    print("\n7. –î–ª—è –¥–æ–æ–±—É—á–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –º–æ–¥–µ–ª–∏:")
    print("   python cli.py continue")
    print("\n8. –î–ª—è –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
    print("   deactivate")
    print("\n" + "="*60)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    print("üöÄ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –ù–ê–°–¢–†–û–ô–ö–ê –ü–†–û–ï–ö–¢–ê BERSERK TCG TFLITE")
    print("="*60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Python
    if not check_python():
        return False
    
    # –°–æ–∑–¥–∞–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
    if not create_venv():
        return False
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    if not install_requirements():
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ
    check_cards_directory()
    
    # –í—ã–≤–æ–¥–∏–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
    print_next_steps()
    
    return True

if __name__ == "__main__":
    try:
        success = main()
        if not success:
            print("\n‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–∞–º–∏")
            sys.exit(1)
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)