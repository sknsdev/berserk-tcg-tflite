#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ Berserk TCG TFLite
–ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ—ç—Ç–∞–ø–Ω–æ –≤—ã–ø–æ–ª–Ω—è—Ç—å –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –æ—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–æ –≥–æ—Ç–æ–≤–æ–π –º–æ–¥–µ–ª–∏
"""

import argparse
import os
import sys
from pathlib import Path

def check_environment():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
    if not Path("venv").exists():
        print("‚ùå –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        print("–ó–∞–ø—É—Å—Ç–∏—Ç–µ: python setup.py")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–ø–∫—É —Å –∫–∞—Ä—Ç–∞–º–∏
    if not Path("cards").exists():
        print("‚ùå –ü–∞–ø–∫–∞ 'cards' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        print("–°–æ–∑–¥–∞–π—Ç–µ –ø–∞–ø–∫—É 'cards' –∏ –ø–æ–º–µ—Å—Ç–∏—Ç–µ –≤ –Ω–µ—ë –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ä—Ç")
        return False
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–∞—Ä—Ç—ã
    card_files = list(Path("cards").glob("**/*.webp"))
    if len(card_files) == 0:
        print("‚ùå –í –ø–∞–ø–∫–µ 'cards' –Ω–µ—Ç —Ñ–∞–π–ª–æ–≤ .webp")
        return False
    
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(card_files)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∫–∞—Ä—Ç")
    return True

def check_augmented_data():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∞—É–≥–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    if not Path("cards_augmented").exists():
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤ –≤ –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ (cards_augmented/<set>/<variant>/)
    augmented_files = list(Path("cards_augmented").rglob("*.webp"))
    csv_file = Path("cards_augmented/augmented_dataset.csv")
    
    return len(augmented_files) > 0 and csv_file.exists()

def create_augmented_data():
    """–°–æ–∑–¥–∞–µ—Ç –∞—É–≥–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–∞—Ç–∞—Å–µ—Ç"""
    print("\n=== –°–û–ó–î–ê–ù–ò–ï –ê–£–ì–ú–ï–ù–¢–ò–†–û–í–ê–ù–ù–û–ì–û –î–ê–¢–ê–°–ï–¢–ê ===")
    
    if check_augmented_data():
        response = input("–ê—É–≥–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç. –ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å? (y/N): ")
        if response.lower() != 'y':
            print("–ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∞—É–≥–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
            return True
    
    try:
        from data_augmentation import AdvancedDataAugmentator, AugmentationConfig
        
        # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—É–≥–º–µ–Ω—Ç–∞—Ü–∏–π
        try:
            num_augs = int(input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—É–≥–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤–µ—Ä—Å–∏–π –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è 4-6): ") or "4")
            if num_augs < 1:
                num_augs = 4
        except ValueError:
            num_augs = 4
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config = AugmentationConfig(num_augmentations=num_augs)
        augmentator = AdvancedDataAugmentator(config=config)
        
        # –°–æ–∑–¥–∞–µ–º –∞—É–≥–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–∞—Ç–∞—Å–µ—Ç
        aug_df = augmentator.create_augmented_dataset(mode='full')
        
        if not aug_df.empty:
            # –û–±–Ω–æ–≤–ª—è–µ–º CSV –∏ —Å–æ–∑–¥–∞–µ–º —ç–Ω–∫–æ–¥–µ—Ä—ã
            augmentator.update_csv_dataset(aug_df)
            aug_df = augmentator.create_labels_and_encoders(aug_df)
        
        print("‚úÖ –ê—É–≥–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–∞—Ç–∞—Å–µ—Ç —Å–æ–∑–¥–∞–Ω")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞—É–≥–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç–∞: {e}")
        return False

def train_new_model():
    """–û–±—É—á–∞–µ—Ç –Ω–æ–≤—É—é –º–æ–¥–µ–ª—å"""
    print("\n=== –û–ë–£–ß–ï–ù–ò–ï –ù–û–í–û–ô –ú–û–î–ï–õ–ò ===")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É–≥–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    if not check_augmented_data():
        print("‚ùå –ê—É–≥–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        print("–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: python cli.py augment")
        return False
    
    try:
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã –º–æ–¥–µ–ª–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
        old_files = ['berserk_card_model.h5', 'berserk_card_model.tflite', 'model_info.json']
        for file in old_files:
            if Path(file).exists():
                Path(file).unlink()
                print(f"–£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª: {file}")
        
        from train_model import main as train_main
        train_main()
        
        print("‚úÖ –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏: {e}")
        return False

def continue_training():
    """–î–æ–æ–±—É—á–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –º–æ–¥–µ–ª—å"""
    print("\n=== –î–û–û–ë–£–ß–ï–ù–ò–ï –°–£–©–ï–°–¢–í–£–Æ–©–ï–ô –ú–û–î–ï–õ–ò ===")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–æ–¥–µ–ª–∏
    if not Path("berserk_card_model.h5").exists():
        print("‚ùå –°—É—â–µ—Å—Ç–≤—É—é—â–∞—è –º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        print("–°–Ω–∞—á–∞–ª–∞ –æ–±—É—á–∏—Ç–µ –Ω–æ–≤—É—é –º–æ–¥–µ–ª—å: python cli.py train")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É–≥–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    if not check_augmented_data():
        print("‚ùå –ê—É–≥–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        print("–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: python cli.py augment")
        return False
    
    try:
        from train_model import continue_training_main
        continue_training_main()
        
        print("‚úÖ –î–æ–æ–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–æ–±—É—á–µ–Ω–∏–∏: {e}")
        return False

def test_model():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –º–æ–¥–µ–ª—å"""
    print("\n=== –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ú–û–î–ï–õ–ò ===")
    
    if not Path("berserk_card_model.tflite").exists():
        print("‚ùå TensorFlow Lite –º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        print("–°–Ω–∞—á–∞–ª–∞ –æ–±—É—á–∏—Ç–µ –º–æ–¥–µ–ª—å: python cli.py train")
        return False
    
    try:
        from test_model import main as test_main
        test_main()
        
        print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        return False

def check_dataset():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–∞—Ç–∞—Å–µ—Ç"""
    print("\n=== –ü–†–û–í–ï–†–ö–ê –î–ê–¢–ê–°–ï–¢–ê ===")
    
    try:
        from check_dataset import main as check_main
        check_main()
        
        print("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞—Ç–∞—Å–µ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–∞—Ç–∞—Å–µ—Ç–∞: {e}")
        return False

def run_web_demo():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤–µ–±-–¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é"""
    print("\n=== –ó–ê–ü–£–°–ö –í–ï–ë-–î–ï–ú–û–ù–°–¢–†–ê–¶–ò–ò ===")
    
    if not Path("berserk_card_model.tflite").exists():
        print("‚ùå TensorFlow Lite –º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        print("–°–Ω–∞—á–∞–ª–∞ –æ–±—É—á–∏—Ç–µ –º–æ–¥–µ–ª—å: python cli.py train")
        return False
    
    try:
        from web_demo import main as web_main
        web_main()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –≤–µ–±-–¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        return False

def full_pipeline():
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–ª–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω –æ—Ç –Ω–∞—á–∞–ª–∞ –¥–æ –∫–æ–Ω—Ü–∞"""
    print("\n=== –ü–û–õ–ù–´–ô –ü–ê–ô–ü–õ–ê–ô–ù –û–ë–£–ß–ï–ù–ò–Ø ===")
    
    if not check_environment():
        return False
    
    # 1. –°–æ–∑–¥–∞–µ–º –∞—É–≥–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    if not create_augmented_data():
        return False
    
    # 2. –û–±—É—á–∞–µ–º –º–æ–¥–µ–ª—å
    if not train_new_model():
        return False
    
    # 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å
    if not test_model():
        return False
    
    print("\nüéâ –ü–æ–ª–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
    print("–ú–æ–¥–µ–ª—å –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.")
    print("–ó–∞–ø—É—Å—Ç–∏—Ç–µ –≤–µ–±-–¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é: python cli.py web")
    
    return True

def main():
    parser = argparse.ArgumentParser(
        description="CLI –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ Berserk TCG TFLite",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  python cli.py check          # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–∫—Ä—É–∂–µ–Ω–∏–µ –∏ –¥–∞–Ω–Ω—ã–µ
  python cli.py augment        # –°–æ–∑–¥–∞—Ç—å –∞—É–≥–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–∞—Ç–∞—Å–µ—Ç
  python cli.py train          # –û–±—É—á–∏—Ç—å –Ω–æ–≤—É—é –º–æ–¥–µ–ª—å
  python cli.py continue       # –î–æ–æ–±—É—á–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –º–æ–¥–µ–ª—å
  python cli.py test           # –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥–µ–ª—å
  python cli.py web            # –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤–µ–±-–¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é
  python cli.py full           # –í—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–ª–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω
        """
    )
    
    parser.add_argument(
        'command',
        choices=['check', 'augment', 'train', 'continue', 'test', 'web', 'full'],
        help='–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è'
    )
    
    if len(sys.argv) == 1:
        parser.print_help()
        return
    
    args = parser.parse_args()
    
    print("üöÄ BERSERK TCG TFLITE - CLI –ò–ù–¢–ï–†–§–ï–ô–°")
    print("=" * 50)
    
    if args.command == 'check':
        check_environment()
        check_dataset()
    elif args.command == 'augment':
        if check_environment():
            create_augmented_data()
    elif args.command == 'train':
        if check_environment():
            train_new_model()
    elif args.command == 'continue':
        if check_environment():
            continue_training()
    elif args.command == 'test':
        if check_environment():
            test_model()
    elif args.command == 'web':
        if check_environment():
            run_web_demo()
    elif args.command == 'full':
        full_pipeline()

if __name__ == "__main__":
    main()