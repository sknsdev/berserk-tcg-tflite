#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π CLI –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –∫–∞—Ä—Ç –ë–µ—Ä—Å–µ—Ä–∫
–ê–≤—Ç–æ—Ä: AI Assistant
–û–ø–∏—Å–∞–Ω–∏–µ: –ï–¥–∏–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –ø—Ä–æ–µ–∫—Ç–∞
"""

import sys
if sys.platform == 'win32':
    import io
    sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding='utf-8')

import os
import time
import subprocess
from pathlib import Path

class BerserkCLI:
    def __init__(self):
        self.project_root = Path.cwd()
        self.clear_screen()
        
    def clear_screen(self):
        """–û—á–∏—â–∞–µ—Ç —ç–∫—Ä–∞–Ω"""
        os.system('cls' if os.name == 'nt' else 'clear')
    
    def show_header(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        print("""‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                 üÉè –ë–ï–†–°–ï–†–ö TCG - –†–ê–°–ü–û–ó–ù–ê–í–ê–ù–ò–ï –ö–ê–†–¢           ‚ïë
‚ïë                     TensorFlow Lite Project                  ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù""")
        print()
    
    def show_main_menu(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        print("üìã –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ:")
        print()
        print("üîß –ù–ê–°–¢–†–û–ô–ö–ê –ò –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê:")
        print("  1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è")
        print("  2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å")
        print("  3. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏")
        print("  4. –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ GPU")
        print()
        print("üìä –†–ê–ë–û–¢–ê –° –î–ê–ù–ù–´–ú–ò:")
        print("  5. –û—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å –∫–∞—Ä—Ç—ã –ø–æ –ø–∞–ø–∫–∞–º")
        print("  6. –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –±–∞–∑–æ–≤—ã–π –¥–∞—Ç–∞—Å–µ—Ç")
        print("  7. –°–æ–∑–¥–∞—Ç—å –∞—É–≥–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–∞—Ç–∞—Å–µ—Ç")
        print("  8. –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–∞—Ç–∞—Å–µ—Ç–∞")
        print("  9. –ê–Ω–∞–ª–∏–∑ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–ª–∞—Å—Å–æ–≤")
        print()
        print("ü§ñ –û–ë–£–ß–ï–ù–ò–ï –ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï:")
        print(" 10. –û–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å (–±–∞–∑–æ–≤—ã–π –¥–∞—Ç–∞—Å–µ—Ç)")
        print(" 11. –û–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å (–∞—É–≥–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–∞—Ç–∞—Å–µ—Ç)")
        print(" 12. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥–µ–ª—å")
        print(" 13. –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤–µ–±-–¥–µ–º–æ")
        print()
        print("üöÄ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ï –†–ï–ñ–ò–ú–´:")
        print(" 14. –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª (–±–∞–∑–æ–≤—ã–π)")
        print(" 15. –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª (—Å –∞—É–≥–º–µ–Ω—Ç–∞—Ü–∏–µ–π)")
        print()
        print("‚ÑπÔ∏è  –ò–ù–§–û–†–ú–ê–¶–ò–Ø:")
        print(" 16. –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–µ–∫—Ç–µ")
        print(" 17. –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–µ–∫—Ç–∞")
        print()
        print("  0. –í—ã—Ö–æ–¥")
        print()
    
    def run_script(self, script_name, description=None):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–∫—Ä–∏–ø—Ç –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
        if description:
            print(f"\nüîÑ {description}...")
        else:
            print(f"\nüîÑ –ó–∞–ø—É—Å–∫ {script_name}...")
        
        try:
            result = subprocess.run([sys.executable, script_name], 
                                  capture_output=False, text=True)
            
            if result.returncode == 0:
                print(f"\n‚úÖ {script_name} –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            else:
                print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ {script_name}")
            
            return result.returncode == 0
            
        except Exception as e:
            print(f"\n‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ {script_name}: {e}")
            return False
    
    def check_file_exists(self, filename, description=None):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞"""
        if os.path.exists(filename):
            if description:
                print(f"‚úÖ {description}: –Ω–∞–π–¥–µ–Ω")
            return True
        else:
            if description:
                print(f"‚ùå {description}: –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
    
    def show_project_status(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–µ–∫—Ç–∞"""
        print("\nüìä –°–¢–ê–¢–£–° –ü–†–û–ï–ö–¢–ê:")
        print()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        print("üìÅ –î–ê–ù–ù–´–ï:")
        self.check_file_exists('./cards', '–ü–∞–ø–∫–∞ —Å –∫–∞—Ä—Ç–∞–º–∏')
        self.check_file_exists('./cards_dataset.csv', '–ë–∞–∑–æ–≤—ã–π –¥–∞—Ç–∞—Å–µ—Ç')
        self.check_file_exists('./augmented_cards_dataset.csv', '–ê—É–≥–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–∞—Ç–∞—Å–µ—Ç')
        self.check_file_exists('./cards_augmented', '–ü–∞–ø–∫–∞ –∞—É–≥–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç')
        print()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥–µ–ª–µ–π
        print("ü§ñ –ú–û–î–ï–õ–ò:")
        self.check_file_exists('./berserk_card_model.tflite', 'TensorFlow Lite –º–æ–¥–µ–ª—å (–±–∞–∑–æ–≤–∞—è)')
        self.check_file_exists('./berserk_card_model.h5', 'Keras –º–æ–¥–µ–ª—å (–±–∞–∑–æ–≤–∞—è)')
        self.check_file_exists('./berserk_card_model_augmented.tflite', 'TensorFlow Lite –º–æ–¥–µ–ª—å (–∞—É–≥–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è)')
        self.check_file_exists('./berserk_card_model_augmented.h5', 'Keras –º–æ–¥–µ–ª—å (–∞—É–≥–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è)')
        print()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        print("‚öôÔ∏è –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø:")
        self.check_file_exists('./label_encoders.json', '–≠–Ω–∫–æ–¥–µ—Ä—ã –º–µ—Ç–æ–∫ (–±–∞–∑–æ–≤—ã–µ)')
        self.check_file_exists('./augmented_label_encoders.json', '–≠–Ω–∫–æ–¥–µ—Ä—ã –º–µ—Ç–æ–∫ (–∞—É–≥–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ)')
        self.check_file_exists('./model_info.json', '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏ (–±–∞–∑–æ–≤–∞—è)')
        self.check_file_exists('./model_info_augmented.json', '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏ (–∞—É–≥–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è)')
        print()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç—á–µ—Ç–æ–≤
        print("üìà –û–¢–ß–ï–¢–´:")
        self.check_file_exists('./training_history.png', '–ì—Ä–∞—Ñ–∏–∫ –æ–±—É—á–µ–Ω–∏—è (–±–∞–∑–æ–≤—ã–π)')
        self.check_file_exists('./training_history_augmented.png', '–ì—Ä–∞—Ñ–∏–∫ –æ–±—É—á–µ–Ω–∏—è (–∞—É–≥–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π)')
        self.check_file_exists('./dataset_report.json', '–û—Ç—á–µ—Ç –æ –¥–∞—Ç–∞—Å–µ—Ç–µ')
        self.check_file_exists('./dataset_statistics.png', '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∞—Ç–∞—Å–µ—Ç–∞')
    
    def show_project_info(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–µ–∫—Ç–µ"""
        print("""\nüìñ –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ü–†–û–ï–ö–¢–ï:

üéØ –¶–ï–õ–¨:
–°–æ–∑–¥–∞–Ω–∏–µ TensorFlow Lite –º–æ–¥–µ–ª–∏ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –∫–∞—Ä—Ç
–∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–Ω–æ–π –∫–∞—Ä—Ç–æ—á–Ω–æ–π –∏–≥—Ä—ã "–ë–µ—Ä—Å–µ—Ä–∫"

üîç –í–û–ó–ú–û–ñ–ù–û–°–¢–ò –†–ê–°–ü–û–ó–ù–ê–í–ê–ù–ò–Ø:
‚Ä¢ –°–µ—Ç –∫–∞—Ä—Ç—ã (s1, s2, s3, s4, s5, laar)
‚Ä¢ –ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã (1-200+)
‚Ä¢ –í–∞—Ä–∏–∞–Ω—Ç –∫–∞—Ä—Ç—ã (normal, pf, alt)

üèóÔ∏è –ê–†–•–ò–¢–ï–ö–¢–£–†–ê:
‚Ä¢ –ë–∞–∑–æ–≤–∞—è –º–æ–¥–µ–ª—å: MobileNetV2
‚Ä¢ –ú–µ—Ç–æ–¥ –æ–±—É—á–µ–Ω–∏—è: Transfer Learning
‚Ä¢ –§–æ—Ä–º–∞—Ç –º–æ–¥–µ–ª–∏: TensorFlow Lite (.tflite)
‚Ä¢ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: –ö–≤–∞–Ω—Ç–∏–∑–∞—Ü–∏—è –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤

üìä –î–ê–ù–ù–´–ï:
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–∞–ø–æ–∫ –ø–æ —Å–µ—Ç–∞–º
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∞—É–≥–º–µ–Ω—Ç–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
‚Ä¢ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞—Ç–∞—Å–µ—Ç–∞

üöÄ –ü–†–ò–ú–ï–ù–ï–ù–ò–ï:
‚Ä¢ –ú–æ–±–∏–ª—å–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
‚Ä¢ –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –∫–∞—Ç–∞–ª–æ–≥–∏–∑–∞—Ü–∏–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–π""")
    
    def wait_for_enter(self):
        """–ñ–¥–µ—Ç –Ω–∞–∂–∞—Ç–∏—è Enter"""
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    
    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        while True:
            self.clear_screen()
            self.show_header()
            self.show_main_menu()
            
            try:
                choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (0-17): ").strip()
                
                if choice == '0':
                    print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                    break
                
                elif choice == '1':
                    self.run_script('main.py check', '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π')
                    
                elif choice == '2':
                    self.run_script('check_compatibility.py', '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏')
                    
                elif choice == '3':
                    self.run_script('setup.py', '–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π')
                    
                elif choice == '4':
                    self.run_script('gpu_diagnostic.py', '–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ GPU')
                    
                elif choice == '5':
                    self.run_script('organize_cards.py', '–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç –ø–æ –ø–∞–ø–∫–∞–º')
                    
                elif choice == '6':
                    self.run_script('main.py prepare', '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –±–∞–∑–æ–≤–æ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç–∞')
                    
                elif choice == '7':
                    self.run_script('main.py augment', '–°–æ–∑–¥–∞–Ω–∏–µ –∞—É–≥–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç–∞')
                    
                elif choice == '8':
                    self.run_script('check_dataset.py', '–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–∞—Ç–∞—Å–µ—Ç–∞')
                    
                elif choice == '9':
                    self.run_script('analyze_classes.py', '–ê–Ω–∞–ª–∏–∑ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–ª–∞—Å—Å–æ–≤')
                    
                elif choice == '10':
                    self.run_script('main.py train', '–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ (–±–∞–∑–æ–≤—ã–π –¥–∞—Ç–∞—Å–µ—Ç)')
                    
                elif choice == '11':
                    self.run_script('main.py train-aug', '–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ (–∞—É–≥–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–∞—Ç–∞—Å–µ—Ç)')
                    
                elif choice == '12':
                    self.run_script('test_model.py', '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏')
                    
                elif choice == '13':
                    print("\nüåê –ó–∞–ø—É—Å–∫ –≤–µ–±-–¥–µ–º–æ...")
                    print("–í–µ–±-—Å–µ—Ä–≤–µ—Ä –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:5000")
                    print("–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
                    self.run_script('web_demo.py', '–ó–∞–ø—É—Å–∫ –≤–µ–±-–¥–µ–º–æ')
                    
                elif choice == '14':
                    self.run_script('main.py full', '–ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª (–±–∞–∑–æ–≤—ã–π)')
                    
                elif choice == '15':
                    self.run_script('main.py full-aug', '–ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª (—Å –∞—É–≥–º–µ–Ω—Ç–∞—Ü–∏–µ–π)')
                    
                elif choice == '16':
                    self.show_project_info()
                    
                elif choice == '17':
                    self.show_project_status()
                    
                else:
                    print("\n‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                
                if choice != '0':
                    self.wait_for_enter()
                    
            except KeyboardInterrupt:
                print("\n\nüëã –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                break
            except Exception as e:
                print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
                self.wait_for_enter()

if __name__ == "__main__":
    cli = BerserkCLI()
    cli.run()