#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ì–ª–∞–≤–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –∫–∞—Ä—Ç –ë–µ—Ä—Å–µ—Ä–∫
–ê–≤—Ç–æ—Ä: AI Assistant
–û–ø–∏—Å–∞–Ω–∏–µ: –ü–æ–ª–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω –æ–±—É—á–µ–Ω–∏—è –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è TensorFlow Lite –º–æ–¥–µ–ª–∏
"""

import os
import sys
import argparse
import time
from data_preparation import BerserkCardDataset
from train_model import main as train_main
from test_model import main as test_main

def check_requirements():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π...")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Python –≤–µ—Ä—Å–∏–∏
    version = sys.version_info
    if version < (3, 8):
        print("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è Python 3.8 –∏–ª–∏ –≤—ã—à–µ")
        return False
    
    if version >= (3, 13):
        print("‚ö†Ô∏è Python 3.13+ –º–æ–∂–µ—Ç –∏–º–µ—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏")
        print("üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ 'python check_compatibility.py' –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ TensorFlow
    try:
        import tensorflow as tf
        print(f"‚úÖ TensorFlow {tf.__version__} –Ω–∞–π–¥–µ–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ GPU
        gpus = tf.config.list_physical_devices('GPU')
        if gpus:
            print(f"üéÆ –ù–∞–π–¥–µ–Ω–æ GPU: {len(gpus)} —É—Å—Ç—Ä–æ–π—Å—Ç–≤")
            for i, gpu in enumerate(gpus):
                print(f"   GPU {i}: {gpu.name}")
        else:
            print("üîß GPU –Ω–µ –Ω–∞–π–¥–µ–Ω, –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è CPU –∫–æ–º–ø—å—é—Ç–µ—Ä–∞")
            print("üí° –î–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ GPU –∑–∞–ø—É—Å—Ç–∏—Ç–µ: python gpu_diagnostic.py")
            
    except ImportError:
        print("‚ùå TensorFlow –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        print("üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ 'python check_compatibility.py' –¥–ª—è —Ä–µ—à–µ–Ω–∏—è")
        return False
    except Exception as e:
        print(f"‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å TensorFlow: {e}")
        print("üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ 'python check_compatibility.py' –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—Ä—É–≥–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    required_packages = {
        'numpy': 'numpy',
        'PIL': 'Pillow', 
        'sklearn': 'scikit-learn',
        'matplotlib': 'matplotlib',
        'cv2': 'opencv-python',
        'pandas': 'pandas',
        'tqdm': 'tqdm'
    }
    missing_packages = []
    
    for import_name, package_name in required_packages.items():
        try:
            __import__(import_name)
        except ImportError:
            missing_packages.append(package_name)
    
    if missing_packages:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–∞–∫–µ—Ç—ã: {', '.join(missing_packages)}")
        print("üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ 'python setup.py' –∏–ª–∏ 'pip install -r requirements.txt'")
        return False
    
    print("‚úÖ –í—Å–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã")
    return True

def check_data():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö"""
    cards_dir = './cards'
    
    if not os.path.exists(cards_dir):
        print(f"‚ùå –ü–∞–ø–∫–∞ —Å –∫–∞—Ä—Ç–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {cards_dir}")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∞–ø–∫–∏
    subdirs = [d for d in os.listdir(cards_dir) if os.path.isdir(os.path.join(cards_dir, d))]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∫–æ—Ä–Ω–µ –ø–∞–ø–∫–∏
    root_images = [f for f in os.listdir(cards_dir) 
                   if f.lower().endswith(('.webp', '.jpg', '.jpeg', '.png'))]
    
    total_images = 0
    
    if len(subdirs) > 0:
        # –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å –ø–æ–¥–ø–∞–ø–∫–∞–º–∏
        print("üìÅ –ù–∞–π–¥–µ–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å –ø–æ–¥–ø–∞–ø–∫–∞–º–∏:")
        for subdir in subdirs:
            subdir_path = os.path.join(cards_dir, subdir)
            image_files = [f for f in os.listdir(subdir_path) 
                          if f.lower().endswith(('.webp', '.jpg', '.jpeg', '.png'))]
            total_images += len(image_files)
            print(f"üìÇ {subdir}: {len(image_files)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
    
    if len(root_images) > 0:
        # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∫–æ—Ä–Ω–µ –ø–∞–ø–∫–∏
        total_images += len(root_images)
        print(f"üìÑ –í –∫–æ—Ä–Ω–µ –ø–∞–ø–∫–∏: {len(root_images)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
        
        if len(subdirs) == 0:
            print("üí° –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –∫–æ—Ä–Ω–µ –ø–∞–ø–∫–∏ cards")
            print("üí° –î–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ –∫–ª–∞—Å—Å–∞–º –∑–∞–ø—É—Å—Ç–∏—Ç–µ: python organize_cards.py")
    
    if total_images == 0:
        print(f"‚ùå –í –ø–∞–ø–∫–µ {cards_dir} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
        return False
    
    print(f"‚úÖ –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ {total_images} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∫–∞—Ä—Ç")
    return True

def prepare_data():
    """–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è"""
    print("\n=== –ü–û–î–ì–û–¢–û–í–ö–ê –î–ê–ù–ù–´–• ===")
    
    try:
        dataset = BerserkCardDataset()
        df = dataset.load_dataset()
        df = dataset.prepare_labels(df)
        dataset.get_dataset_info(df)
        dataset.save_label_encoders()
        df.to_csv('cards_dataset.csv', index=False, encoding='utf-8')
        
        print("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

def create_augmented_data():
    """–°–æ–∑–¥–∞–µ—Ç –∞—É–≥–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–∞—Ç–∞—Å–µ—Ç"""
    print("\n=== –°–û–ó–î–ê–ù–ò–ï –ê–£–ì–ú–ï–ù–¢–ò–†–û–í–ê–ù–ù–û–ì–û –î–ê–¢–ê–°–ï–¢–ê ===")
    
    if not os.path.exists('cards_dataset.csv'):
        print("‚ùå –ë–∞–∑–æ–≤—ã–π –¥–∞—Ç–∞—Å–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É –¥–∞–Ω–Ω—ã—Ö")
        return False
    
    try:
        import subprocess
        result = subprocess.run([sys.executable, "data_augmentation.py"], 
                              capture_output=True, text=True)
        
        if result.returncode == 0:
            print("‚úÖ –ê—É–≥–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–∞—Ç–∞—Å–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω")
            print(result.stdout)
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞—É–≥–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç–∞: {result.stderr}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∞—É–≥–º–µ–Ω—Ç–∞—Ü–∏–∏: {e}")
        return False

def check_dataset():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –¥–∞—Ç–∞—Å–µ—Ç–∞"""
    print("\n=== –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –î–ê–¢–ê–°–ï–¢–ê ===")
    
    try:
        import subprocess
        result = subprocess.run([sys.executable, "check_dataset.py"], 
                              capture_output=True, text=True)
        
        print(result.stdout)
        if result.stderr:
            print("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:", result.stderr)
        
        return result.returncode == 0
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {e}")
        return False

def train_model():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏"""
    print("\n=== –û–ë–£–ß–ï–ù–ò–ï –ú–û–î–ï–õ–ò ===")
    
    try:
        start_time = time.time()
        train_main()
        end_time = time.time()
        
        training_time = end_time - start_time
        print(f"\n‚úÖ –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ {training_time/60:.1f} –º–∏–Ω—É—Ç")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏ –º–æ–¥–µ–ª–∏: {e}")
        return False

def train_augmented_model():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ —Å –∞—É–≥–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    print("\n=== –û–ë–£–ß–ï–ù–ò–ï –ú–û–î–ï–õ–ò –° –ê–£–ì–ú–ï–ù–¢–ò–†–û–í–ê–ù–ù–´–ú–ò –î–ê–ù–ù–´–ú–ò ===")
    
    if not os.path.exists('augmented_cards_dataset.csv'):
        print("‚ùå –ê—É–≥–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–∞—Ç–∞—Å–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        print("üí° –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∞—É–≥–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç–∞")
        return False
    
    try:
        import subprocess
        start_time = time.time()
        
        result = subprocess.run([sys.executable, "train_model_augmented.py"], 
                              capture_output=False, text=True)
        
        end_time = time.time()
        training_time = end_time - start_time
        
        if result.returncode == 0:
            print(f"\n‚úÖ –û–±—É—á–µ–Ω–∏–µ —Å –∞—É–≥–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ {training_time/60:.1f} –º–∏–Ω—É—Ç")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏ —Å –∞—É–≥–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –æ–±—É—á–µ–Ω–∏—è: {e}")
        return False

def test_model():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏"""
    print("\n=== –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ú–û–î–ï–õ–ò ===")
    
    if not os.path.exists('berserk_card_model.tflite'):
        print("‚ùå –ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –æ–±—É—á–µ–Ω–∏–µ")
        return False
    
    try:
        test_main()
        print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –º–æ–¥–µ–ª–∏: {e}")
        return False

def run_compatibility_check():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
    try:
        import subprocess
        result = subprocess.run([sys.executable, "check_compatibility.py"], 
                              capture_output=True, text=True)
        print(result.stdout)
        if result.stderr:
            print("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:", result.stderr)
        return result.returncode == 0
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏: {e}")
        return False

def show_project_info():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–µ–∫—Ç–µ"""
    print("""
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                 –ü–†–û–ï–ö–¢ –†–ê–°–ü–û–ó–ù–ê–í–ê–ù–ò–Ø –ö–ê–†–¢ –ë–ï–†–°–ï–†–ö            ‚ïë
‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£
‚ïë –û–ø–∏—Å–∞–Ω–∏–µ: TensorFlow Lite –º–æ–¥–µ–ª—å –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –∫–∞—Ä—Ç      ‚ïë
‚ïë           –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–Ω–æ–π –∫–∞—Ä—Ç–æ—á–Ω–æ–π –∏–≥—Ä—ã –ë–µ—Ä—Å–µ—Ä–∫            ‚ïë
‚ïë                                                              ‚ïë
‚ïë –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:                                                 ‚ïë
‚ïë ‚Ä¢ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Å–µ—Ç–∞ –∫–∞—Ä—Ç—ã (s1, s2, s3, s4, s5, laar)       ‚ïë
‚ïë ‚Ä¢ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç—ã                                   ‚ïë
‚ïë ‚Ä¢ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç–∞ (normal, pf, alt)                    ‚ïë
‚ïë ‚Ä¢ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤           ‚ïë
‚ïë                                                              ‚ïë
‚ïë –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: MobileNetV2 + Transfer Learning                ‚ïë
‚ïë –§–æ—Ä–º–∞—Ç –º–æ–¥–µ–ª–∏: TensorFlow Lite (.tflite)                    ‚ïë
‚ïë                                                              ‚ïë
‚ïë üîß –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞:                                 ‚ïë
‚ïë python check_compatibility.py  - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏     ‚ïë
‚ïë python setup.py               - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞    ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
    """)

def main():
    parser = argparse.ArgumentParser(
        description='–ü—Ä–æ–µ–∫—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –∫–∞—Ä—Ç –ë–µ—Ä—Å–µ—Ä–∫',
        formatter_class=argparse.RawDescriptionHelpFormatter
    )
    
    parser.add_argument(
        'action',
        choices=['info', 'check', 'compatibility', 'prepare', 'augment', 'diagnose', 'train', 'train-aug', 'test', 'full', 'full-aug'],
        help='''
–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:
  info          - –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–µ–∫—Ç–µ
  check         - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏ –¥–∞–Ω–Ω—ã–µ
  compatibility - –ü–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
  prepare       - –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
  augment       - –°–æ–∑–¥–∞—Ç—å –∞—É–≥–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–∞—Ç–∞—Å–µ—Ç
  diagnose      - –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–∞—Ç–∞—Å–µ—Ç–∞
  train         - –û–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å (–±–∞–∑–æ–≤—ã–π –¥–∞—Ç–∞—Å–µ—Ç)
  train-aug     - –û–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å (–∞—É–≥–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–∞—Ç–∞—Å–µ—Ç)
  test          - –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥–µ–ª—å
  full          - –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª (prepare + train + test)
  full-aug      - –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Å –∞—É–≥–º–µ–Ω—Ç–∞—Ü–∏–µ–π (prepare + augment + train-aug + test)
        '''
    )
    
    args = parser.parse_args()
    
    if args.action == 'info':
        show_project_info()
        
    elif args.action == 'check':
        print("\n=== –ü–†–û–í–ï–†–ö–ê –°–ò–°–¢–ï–ú–´ ===")
        deps_ok = check_requirements()
        data_ok = check_data()
        
        if deps_ok and data_ok:
            print("\n‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ")
        else:
            print("\n‚ùå –°–∏—Å—Ç–µ–º–∞ –Ω–µ –≥–æ—Ç–æ–≤–∞. –ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –≤—ã—à–µ")
            sys.exit(1)
    
    elif args.action == 'compatibility':
        print("\n=== –ü–û–õ–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò ===")
        if not run_compatibility_check():
            sys.exit(1)
    
    elif args.action == 'prepare':
        if not check_requirements() or not check_data():
            sys.exit(1)
        
        if not prepare_data():
            sys.exit(1)
    
    elif args.action == 'augment':
        if not check_requirements() or not check_data():
            sys.exit(1)
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if not os.path.exists('cards_dataset.csv'):
            if not prepare_data():
                sys.exit(1)
        
        if not create_augmented_data():
            sys.exit(1)
    
    elif args.action == 'diagnose':
        if not check_requirements():
            sys.exit(1)
        
        if not check_dataset():
            sys.exit(1)
    
    elif args.action == 'train':
        if not check_requirements() or not check_data():
            sys.exit(1)
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if not os.path.exists('cards_dataset.csv'):
            if not prepare_data():
                sys.exit(1)
        
        if not train_model():
            sys.exit(1)
    
    elif args.action == 'train-aug':
        if not check_requirements() or not check_data():
            sys.exit(1)
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if not os.path.exists('cards_dataset.csv'):
            if not prepare_data():
                sys.exit(1)
        
        # –°–æ–∑–¥–∞–µ–º –∞—É–≥–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if not os.path.exists('augmented_cards_dataset.csv'):
            if not create_augmented_data():
                sys.exit(1)
        
        if not train_augmented_model():
            sys.exit(1)
    
    elif args.action == 'test':
        if not check_requirements():
            sys.exit(1)
        
        if not test_model():
            sys.exit(1)
    
    elif args.action == 'full':
        print("\nüöÄ –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ì–û –¶–ò–ö–õ–ê –û–ë–£–ß–ï–ù–ò–Ø")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∏
        if not check_requirements() or not check_data():
            sys.exit(1)
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        if not prepare_data():
            sys.exit(1)
        
        # –û–±—É—á–µ–Ω–∏–µ
        if not train_model():
            sys.exit(1)
        
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        if not test_model():
            sys.exit(1)
        
        print("\nüéâ –ü–û–õ–ù–´–ô –¶–ò–ö–õ –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ï–ù!")
        print("\n–°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:")
        print("‚Ä¢ berserk_card_model.tflite - TensorFlow Lite –º–æ–¥–µ–ª—å")
        print("‚Ä¢ berserk_card_model.h5 - Keras –º–æ–¥–µ–ª—å")
        print("‚Ä¢ model_info.json - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏")
        print("‚Ä¢ label_encoders.json - –≠–Ω–∫–æ–¥–µ—Ä—ã –º–µ—Ç–æ–∫")
        print("‚Ä¢ cards_dataset.csv - –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–π –¥–∞—Ç–∞—Å–µ—Ç")
        print("‚Ä¢ training_history.png - –ì—Ä–∞—Ñ–∏–∫ –æ–±—É—á–µ–Ω–∏—è")
        print("‚Ä¢ test_results.png - –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
    
    elif args.action == 'full-aug':
        print("\nüöÄ –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ì–û –¶–ò–ö–õ–ê –° –ê–£–ì–ú–ï–ù–¢–ê–¶–ò–ï–ô")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∏
        if not check_requirements() or not check_data():
            sys.exit(1)
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        if not prepare_data():
            sys.exit(1)
        
        # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
        print("\nüìä –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –±–∞–∑–æ–≤–æ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç–∞...")
        check_dataset()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∞—É–≥–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç–∞
        if not create_augmented_data():
            sys.exit(1)
        
        # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∞—É–≥–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç–∞
        print("\nüìä –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∞—É–≥–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç–∞...")
        check_dataset()
        
        # –û–±—É—á–µ–Ω–∏–µ —Å –∞—É–≥–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        if not train_augmented_model():
            sys.exit(1)
        
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        if not test_model():
            sys.exit(1)
        
        print("\nüéâ –ü–û–õ–ù–´–ô –¶–ò–ö–õ –° –ê–£–ì–ú–ï–ù–¢–ê–¶–ò–ï–ô –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ï–ù!")
        print("\n–°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:")
        print("‚Ä¢ berserk_card_model_augmented.tflite - TensorFlow Lite –º–æ–¥–µ–ª—å")
        print("‚Ä¢ berserk_card_model_augmented.h5 - Keras –º–æ–¥–µ–ª—å")
        print("‚Ä¢ model_info_augmented.json - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏")
        print("‚Ä¢ augmented_label_encoders.json - –≠–Ω–∫–æ–¥–µ—Ä—ã –º–µ—Ç–æ–∫")
        print("‚Ä¢ cards_dataset.csv - –ë–∞–∑–æ–≤—ã–π –¥–∞—Ç–∞—Å–µ—Ç")
        print("‚Ä¢ augmented_cards_dataset.csv - –ê—É–≥–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–∞—Ç–∞—Å–µ—Ç")
        print("‚Ä¢ training_history_augmented.png - –ì—Ä–∞—Ñ–∏–∫ –æ–±—É—á–µ–Ω–∏—è")
        print("‚Ä¢ dataset_statistics.png - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∞—Ç–∞—Å–µ—Ç–∞")
        print("‚Ä¢ dataset_report.json - –û—Ç—á–µ—Ç –æ –¥–∞—Ç–∞—Å–µ—Ç–µ")

if __name__ == "__main__":
    main()