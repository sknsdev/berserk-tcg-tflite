#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
–ü—Ä–æ–±—É–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏ –≤—ã–±–∏—Ä–∞–µ—Ç —Ä–∞–±–æ—á–∏–π
"""

import os
import sys
import subprocess
import platform
from pathlib import Path

def run_command(command, shell=True):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ"""
    try:
        result = subprocess.run(command, shell=shell, check=True, 
                              capture_output=True, text=True)
        return True, result.stdout
    except subprocess.CalledProcessError as e:
        return False, e.stderr

def get_pip_path():
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø—É—Ç—å –∫ pip –≤ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏"""
    if platform.system() == "Windows":
        return "venv\\Scripts\\pip"
    else:
        return "venv/bin/pip"

def check_venv():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ —Å–æ–∑–¥–∞–µ—Ç –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ"""
    venv_path = Path("venv")
    
    if not venv_path.exists():
        print("üîß –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
        python_cmd = "python" if platform.system() == "Windows" else "python3"
        success, output = run_command(f"{python_cmd} -m venv venv")
        
        if success:
            print("‚úÖ –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è venv: {output}")
            return False
    
    return True

def method_1_use_global():
    """–ú–µ—Ç–æ–¥ 1: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤"""
    print("\nüîß –ú–µ—Ç–æ–¥ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é —É—Å—Ç–∞–Ω–æ–≤–∫—É
    try:
        import tensorflow as tf
        import numpy as np
        import PIL
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω—ã –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–∞–∫–µ—Ç—ã: TensorFlow {tf.__version__}, NumPy {np.__version__}")
        
        # –ö–æ–ø–∏—Ä—É–µ–º –≤ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
        pip_path = get_pip_path()
        success, output = run_command(f"{pip_path} install tensorflow=={tf.__version__} numpy=={np.__version__} pillow")
        
        if success:
            print("‚úÖ –ü–∞–∫–µ—Ç—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –≤ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è: {output}")
            return False
            
    except ImportError:
        print("‚ùå –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–∞–∫–µ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return False

def method_2_flexible_versions():
    """–ú–µ—Ç–æ–¥ 2: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å –≥–∏–±–∫–∏–º–∏ –≤–µ—Ä—Å–∏—è–º–∏"""
    print("\nüîß –ú–µ—Ç–æ–¥ 2: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å –≥–∏–±–∫–∏–º–∏ –≤–µ—Ä—Å–∏—è–º–∏")
    pip_path = get_pip_path()
    
    # –û–±–Ω–æ–≤–ª—è–µ–º pip
    run_command(f"{pip_path} install --upgrade pip")
    
    success, output = run_command(f"{pip_path} install 'tensorflow>=2.16.0' 'numpy>=1.24.0' 'pillow>=10.0.0'")
    if success:
        print("‚úÖ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å –≥–∏–±–∫–∏–º–∏ –≤–µ—Ä—Å–∏—è–º–∏ —É—Å–ø–µ—à–Ω–∞")
        return test_tensorflow()
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞: {output}")
        return False

def method_3_requirements_file():
    """–ú–µ—Ç–æ–¥ 3: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–∑ —Ñ–∞–π–ª–∞ requirements"""
    print("\nüîß –ú–µ—Ç–æ–¥ 3: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–∑ requirements.txt")
    pip_path = get_pip_path()
    
    success, output = run_command(f"{pip_path} install -r requirements.txt")
    if success:
        print("‚úÖ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–∑ requirements.txt —É—Å–ø–µ—à–Ω–∞")
        return test_tensorflow()
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞: {output}")
        return False



def method_4_conda():
    """–ú–µ—Ç–æ–¥ 4: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —á–µ—Ä–µ–∑ conda"""
    print("\nüîß –ú–µ—Ç–æ–¥ 4: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —á–µ—Ä–µ–∑ conda")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ conda
    success, output = run_command("conda --version")
    if not success:
        print("‚ùå Conda –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        return False
    
    success, output = run_command("conda install tensorflow numpy pillow -y")
    if success:
        print("‚úÖ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —á–µ—Ä–µ–∑ conda —É—Å–ø–µ—à–Ω–∞")
        return test_tensorflow()
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞: {output}")
        return False

def method_5_cpu_only():
    """–ú–µ—Ç–æ–¥ 5: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ CPU-–≤–µ—Ä—Å–∏–∏ TensorFlow"""
    print("\nüîß –ú–µ—Ç–æ–¥ 5: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ CPU-–≤–µ—Ä—Å–∏–∏ TensorFlow")
    pip_path = get_pip_path()
    
    success, output = run_command(f"{pip_path} install tensorflow-cpu numpy pillow")
    if success:
        print("‚úÖ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ CPU-–≤–µ—Ä—Å–∏–∏ —É—Å–ø–µ—à–Ω–∞")
        return test_tensorflow()
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞: {output}")
        return False

def method_6_recreate_venv():
    """–ú–µ—Ç–æ–¥ 6: –ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    print("\nüîß –ú–µ—Ç–æ–¥ 6: –ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
    import shutil
    venv_path = Path("venv")
    if venv_path.exists():
        shutil.rmtree(venv_path)
        print("üóëÔ∏è –°—Ç–∞—Ä–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ")
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ
    if not check_venv():
        return False
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞–∫–µ—Ç—ã
    pip_path = get_pip_path()
    run_command(f"{pip_path} install --upgrade pip")
    
    success, output = run_command(f"{pip_path} install tensorflow numpy pillow")
    if success:
        print("‚úÖ –ù–æ–≤–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ")
        return test_tensorflow()
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞: {output}")
        return False

def test_tensorflow():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∫—É TensorFlow"""
    try:
        import tensorflow as tf
        print(f"‚úÖ TensorFlow {tf.__version__} —Ä–∞–±–æ—Ç–∞–µ—Ç")
        return True
    except ImportError:
        print("‚ùå TensorFlow –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ TensorFlow: {e}")
        return False



def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    print("üîß –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –£–°–¢–ê–ù–û–í–ö–ò")
    print("="*50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
    if not check_venv():
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    print("\nüìã –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è...")
    if test_tensorflow():
        print("\nüéâ TensorFlow —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç! –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.")
        return True
    
    # –°–ø–∏—Å–æ–∫ –º–µ—Ç–æ–¥–æ–≤ –¥–ª—è –ø–æ–ø—ã—Ç–∫–∏
    methods = [
        method_1_use_global,
        method_2_flexible_versions,
        method_3_requirements_file,
        method_4_conda,
        method_5_cpu_only,
        method_6_recreate_venv
    ]
    
    print("\nüöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ø—ã—Ç–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è...")
    
    for i, method in enumerate(methods, 1):
        try:
            if method():
                print(f"\nüéâ –£—Å–ø–µ—Ö! –ú–µ—Ç–æ–¥ {i} —Å—Ä–∞–±–æ—Ç–∞–ª.")
                print("\nüìã –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
                print("1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python main.py check")
                print("2. –ï—Å–ª–∏ –≤—Å—ë —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–∞—á–Ω–∏—Ç–µ –æ–±—É—á–µ–Ω–∏–µ: python main.py full")
                return True
        except Exception as e:
            print(f"‚ùå –ú–µ—Ç–æ–¥ {i} –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π: {e}")
    
    print("\n‚ùå –í—Å–µ –º–µ—Ç–æ–¥—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏")
    print("\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
    print("1. –û–±–Ω–æ–≤–∏—Ç–µ Python –¥–æ –≤–µ—Ä—Å–∏–∏ 3.9-3.12")
    print("2. –ü–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Python —Å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Å–∞–π—Ç–∞")
    print("3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Anaconda/Miniconda")
    print("4. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∑–∞ –ø–æ–º–æ—â—å—é —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –≤–µ—Ä—Å–∏–∏ Python –∏ –û–°")
    
    return False

if __name__ == "__main__":
    try:
        success = main()
        if not success:
            sys.exit(1)
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)