#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ Berserk TCG TFLite
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Ä–µ—à–µ–Ω–∏—è
"""

import sys
import platform
import subprocess
from pathlib import Path

def check_python_version():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–µ—Ä—Å–∏—é Python –∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å TensorFlow"""
    version = sys.version_info
    print(f"üêç Python –≤–µ—Ä—Å–∏—è: {version.major}.{version.minor}.{version.micro}")
    
    if version.major != 3:
        print("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è Python 3.x")
        return False
    
    if version.minor < 8:
        print("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è Python 3.8 –∏–ª–∏ –≤—ã—à–µ")
        return False
    
    if version.minor >= 13:
        print("‚ö†Ô∏è Python 3.13+ –º–æ–∂–µ—Ç –∏–º–µ—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å TensorFlow")
        print("üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å requirements-py313.txt")
        return "warning"
    
    if 9 <= version.minor <= 12:
        print("‚úÖ –û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è Python –¥–ª—è TensorFlow")
        return True
    
    print("‚ö†Ô∏è –í–µ—Ä—Å–∏—è Python –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å, –Ω–æ –Ω–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–ª–∞—Å—å")
    return "warning"

def check_system_info():
    """–í—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ"""
    print(f"üíª –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞: {platform.system()} {platform.release()}")
    print(f"üèóÔ∏è –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: {platform.machine()}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ GPU (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    try:
        import tensorflow as tf
        gpus = tf.config.list_physical_devices('GPU')
        if gpus:
            print(f"üéÆ –ù–∞–π–¥–µ–Ω–æ GPU: {len(gpus)} —É—Å—Ç—Ä–æ–π—Å—Ç–≤")
        else:
            print("üîß GPU –Ω–µ –Ω–∞–π–¥–µ–Ω, –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è CPU —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞")
    except ImportError:
        print("üì¶ TensorFlow –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

def check_requirements_files():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤ requirements"""
    files = {
        "requirements.txt": "–û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π",
        "requirements-py313.txt": "–§–∞–π–ª –¥–ª—è Python 3.13+"
    }
    
    print("\nüìã –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π:")
    for file, description in files.items():
        if Path(file).exists():
            print(f"‚úÖ {file} - {description}")
        else:
            print(f"‚ùå {file} - {description} (–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç)")

def check_cards_directory():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–ø–∫–∏ cards"""
    cards_dir = Path("cards")
    
    if not cards_dir.exists():
        print("‚ùå –ü–∞–ø–∫–∞ 'cards' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return False
    
    webp_files = list(cards_dir.glob("*.webp"))
    if not webp_files:
        print("‚ùå –í –ø–∞–ø–∫–µ 'cards' –Ω–µ—Ç —Ñ–∞–π–ª–æ–≤ .webp")
        return False
    
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(webp_files)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∫–∞—Ä—Ç")
    
    # –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–æ–≤
    sets = set()
    for file in webp_files:
        parts = file.stem.split('_')
        if len(parts) >= 2:
            sets.add(parts[0])
    
    print(f"üìä –ù–∞–π–¥–µ–Ω—ã –Ω–∞–±–æ—Ä—ã –∫–∞—Ä—Ç: {', '.join(sorted(sets))}")
    return True

def suggest_installation_method():
    """–ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    version = sys.version_info
    
    print("\nüí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –º–µ—Ç–æ–¥ —É—Å—Ç–∞–Ω–æ–≤–∫–∏:")
    
    if version.minor >= 13:
        print("1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è Python 3.13+:")
        print("   pip install -r requirements-py313.txt")
        print("\n2. –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–∞–∫–µ—Ç—ã:")
        print("   pip install tensorflow>=2.16.0 numpy pillow scikit-learn matplotlib")
    else:
        print("1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π:")
        print("   pip install -r requirements.txt")
        print("\n2. –ò–ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É:")
        print("   python setup.py")
    
    print("\n3. –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–∞—é—Ç –ø—Ä–æ–±–ª–µ–º—ã, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ conda:")
    print("   conda install tensorflow numpy pillow scikit-learn matplotlib opencv")

def test_tensorflow_installation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∫—É TensorFlow"""
    try:
        import tensorflow as tf
        print(f"‚úÖ TensorFlow {tf.__version__} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
        # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç
        x = tf.constant([1, 2, 3])
        print("‚úÖ TensorFlow —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True
    except ImportError:
        print("‚ùå TensorFlow –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return False
    except Exception as e:
        print(f"‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å TensorFlow: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã –¥–ª—è Berserk TCG TFLite\n")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Python
    python_ok = check_python_version()
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ
    print("\n" + "="*50)
    check_system_info()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤
    print("\n" + "="*50)
    check_requirements_files()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    print("\n" + "="*50)
    print("üìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö:")
    cards_ok = check_cards_directory()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ TensorFlow
    print("\n" + "="*50)
    print("üß† –ü—Ä–æ–≤–µ—Ä–∫–∞ TensorFlow:")
    tf_ok = test_tensorflow_installation()
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    print("\n" + "="*50)
    if not tf_ok:
        suggest_installation_method()
    
    # –ò—Ç–æ–≥–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
    print("\n" + "="*50)
    print("üìä –ò—Ç–æ–≥–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å:")
    
    if python_ok == True and cards_ok and tf_ok:
        print("üéâ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")
        print("\nüöÄ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("   python main.py full  # –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –æ–±—É—á–µ–Ω–∏—è")
        print("   python web_demo.py   # –ó–∞–ø—É—Å–∫ –≤–µ–±-–¥–µ–º–æ")
    else:
        print("‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞")
        if not cards_ok:
            print("   - –î–æ–±–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ä—Ç –≤ –ø–∞–ø–∫—É 'cards'")
        if not tf_ok:
            print("   - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ TensorFlow –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏")
        if python_ok != True:
            print("   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–µ—Ä—Å–∏—é Python")

if __name__ == "__main__":
    main()